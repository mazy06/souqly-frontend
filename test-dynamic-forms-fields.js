const fs = require('fs');
const path = require('path');

console.log('üß™ Test de la gestion des champs de formulaires dynamiques\n');

// V√©rifier les fichiers essentiels
const filesToCheck = [
  'screens/DynamicFormFieldsScreen.tsx',
  'services/DynamicFormService.ts',
  'types/dynamicForms.ts'
];

console.log('üìÅ V√©rification des fichiers...\n');

filesToCheck.forEach(file => {
  const filePath = path.join(__dirname, file);
  if (fs.existsSync(filePath)) {
    const stats = fs.statSync(filePath);
    console.log(`‚úÖ ${file} (${stats.size} bytes)`);
  } else {
    console.log(`‚ùå ${file} - MANQUANT`);
  }
});

// V√©rifier les imports dans DynamicFormFieldsScreen
console.log('\nüîç V√©rification des imports dans DynamicFormFieldsScreen...');
try {
  const fieldsScreenPath = path.join(__dirname, 'screens/DynamicFormFieldsScreen.tsx');
  const fieldsScreenContent = fs.readFileSync(fieldsScreenPath, 'utf8');
  
  const requiredImports = [
    'Picker',
    'DynamicFormService',
    'DynamicForm',
    'FormField'
  ];
  
  requiredImports.forEach(importName => {
    if (fieldsScreenContent.includes(importName)) {
      console.log(`‚úÖ Import ${importName} pr√©sent`);
    } else {
      console.log(`‚ùå Import ${importName} manquant`);
    }
  });
  
  // V√©rifier les m√©thodes du service
  const servicePath = path.join(__dirname, 'services/DynamicFormService.ts');
  const serviceContent = fs.readFileSync(servicePath, 'utf8');
  
  const requiredMethods = [
    'getFormById',
    'addFieldToForm',
    'updateFieldInForm',
    'deleteFieldFromForm'
  ];
  
  console.log('\nüîç V√©rification des m√©thodes du service...');
  requiredMethods.forEach(method => {
    if (serviceContent.includes(`async ${method}`)) {
      console.log(`‚úÖ M√©thode ${method} pr√©sente`);
    } else {
      console.log(`‚ùå M√©thode ${method} manquante`);
    }
  });
  
  // V√©rifier la gestion d'erreurs
  console.log('\nüîç V√©rification de la gestion d\'erreurs...');
  if (fieldsScreenContent.includes('if (formData)')) {
    console.log('‚úÖ V√©rification du formulaire null pr√©sente');
  } else {
    console.log('‚ùå V√©rification du formulaire null manquante');
  }
  
  if (fieldsScreenContent.includes('fieldData.fieldKey.trim()')) {
    console.log('‚úÖ Validation des champs avec trim() pr√©sente');
  } else {
    console.log('‚ùå Validation des champs avec trim() manquante');
  }
  
  // V√©rifier la modal
  if (fieldsScreenContent.includes('Modal')) {
    console.log('‚úÖ Modal pr√©sente');
  } else {
    console.log('‚ùå Modal manquante');
  }
  
  // V√©rifier les champs de saisie
  const requiredFields = [
    'fieldKey',
    'fieldLabel',
    'fieldType',
    'fieldPlaceholder'
  ];
  
  console.log('\nüîç V√©rification des champs de saisie...');
  requiredFields.forEach(field => {
    if (fieldsScreenContent.includes(`fieldData.${field}`)) {
      console.log(`‚úÖ Champ ${field} pr√©sent`);
    } else {
      console.log(`‚ùå Champ ${field} manquant`);
    }
  });
  
} catch (error) {
  console.log('‚ùå Erreur lors de la v√©rification:', error.message);
}

console.log('\n‚úÖ V√©rification termin√©e'); 