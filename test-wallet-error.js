// Test de la v√©rification des fonds insuffisants
const PaymentService = require('./services/PaymentService').default;

async function testWalletBalance() {
  console.log('üß™ Test de la v√©rification des fonds insuffisants...\n');

  try {
    // Test 1: V√©rification avec un montant √©lev√© (devrait √©chouer)
    console.log('1. Test avec montant √©lev√© (200‚Ç¨) - devrait √©chouer:');
    const result1 = await PaymentService.checkWalletBalance(200);
    console.log('‚úÖ R√©sultat:', result1);
    console.log(`   - Solde: ${result1.balance}‚Ç¨`);
    console.log(`   - Montant demand√©: 200‚Ç¨`);
    console.log(`   - Suffisant: ${result1.hasEnoughFunds}\n`);

    // Test 2: V√©rification avec un montant faible (devrait r√©ussir)
    console.log('2. Test avec montant faible (30‚Ç¨) - devrait r√©ussir:');
    const result2 = await PaymentService.checkWalletBalance(30);
    console.log('‚úÖ R√©sultat:', result2);
    console.log(`   - Solde: ${result2.balance}‚Ç¨`);
    console.log(`   - Montant demand√©: 30‚Ç¨`);
    console.log(`   - Suffisant: ${result2.hasEnoughFunds}\n`);

    // Test 3: V√©rification avec le montant exact (devrait r√©ussir)
    console.log('3. Test avec montant exact (50‚Ç¨) - devrait r√©ussir:');
    const result3 = await PaymentService.checkWalletBalance(50);
    console.log('‚úÖ R√©sultat:', result3);
    console.log(`   - Solde: ${result3.balance}‚Ç¨`);
    console.log(`   - Montant demand√©: 50‚Ç¨`);
    console.log(`   - Suffisant: ${result3.hasEnoughFunds}\n`);

    console.log('üéâ Tous les tests sont pass√©s !');
    console.log('\nüìä R√©sum√©:');
    console.log('   - Solde simul√©: 50‚Ç¨');
    console.log('   - Montants > 50‚Ç¨: √âchec (fonds insuffisants)');
    console.log('   - Montants ‚â§ 50‚Ç¨: Succ√®s (fonds suffisants)');

  } catch (error) {
    console.error('‚ùå Erreur lors des tests:', error);
  }
}

testWalletBalance(); 