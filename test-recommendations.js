// Script de test pour v√©rifier le syst√®me de recommandations
// √Ä ex√©cuter dans la console du navigateur ou via React Native Debugger

const testRecommendations = async () => {
  console.log('üß™ Test du syst√®me de recommandations...');
  
  // Test des recommandations content-based
  console.log('üìä Test recommandations content-based...');
  try {
    const response = await fetch('http://localhost:8080/api/recommendations/content-based/1?limit=5', {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer YOUR_TOKEN_HERE'
      }
    });
    
    if (response.ok) {
      const products = await response.json();
      console.log('‚úÖ Recommandations content-based:', products.length, 'produits');
    } else {
      console.log('‚ùå Erreur recommandations content-based:', response.status);
    }
  } catch (error) {
    console.log('‚ùå Erreur r√©seau content-based:', error);
  }
  
  // Test des recommandations collaboratives
  console.log('üë• Test recommandations collaboratives...');
  try {
    const response = await fetch('http://localhost:8080/api/recommendations/collaborative/1?limit=5', {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer YOUR_TOKEN_HERE'
      }
    });
    
    if (response.ok) {
      const products = await response.json();
      console.log('‚úÖ Recommandations collaboratives:', products.length, 'produits');
    } else {
      console.log('‚ùå Erreur recommandations collaboratives:', response.status);
    }
  } catch (error) {
    console.log('‚ùå Erreur r√©seau collaboratives:', error);
  }
  
  // Test des recommandations hybrides
  console.log('üîÄ Test recommandations hybrides...');
  try {
    const response = await fetch('http://localhost:8080/api/recommendations/hybrid/1?limit=5', {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer YOUR_TOKEN_HERE'
      }
    });
    
    if (response.ok) {
      const products = await response.json();
      console.log('‚úÖ Recommandations hybrides:', products.length, 'produits');
    } else {
      console.log('‚ùå Erreur recommandations hybrides:', response.status);
    }
  } catch (error) {
    console.log('‚ùå Erreur r√©seau hybrides:', error);
  }
  
  // Test du calcul de profil utilisateur
  console.log('üë§ Test calcul profil utilisateur...');
  try {
    const response = await fetch('http://localhost:8080/api/recommendations/calculate-profile/1', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer YOUR_TOKEN_HERE'
      }
    });
    
    if (response.ok) {
      console.log('‚úÖ Profil utilisateur calcul√© avec succ√®s');
    } else {
      console.log('‚ùå Erreur calcul profil:', response.status);
    }
  } catch (error) {
    console.log('‚ùå Erreur r√©seau calcul profil:', error);
  }
  
  // Test du calcul des similarit√©s
  console.log('üîó Test calcul similarit√©s...');
  try {
    const response = await fetch('http://localhost:8080/api/recommendations/calculate-similarities/1', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer YOUR_TOKEN_HERE'
      }
    });
    
    if (response.ok) {
      console.log('‚úÖ Similarit√©s calcul√©es avec succ√®s');
    } else {
      console.log('‚ùå Erreur calcul similarit√©s:', response.status);
    }
  } catch (error) {
    console.log('‚ùå Erreur r√©seau calcul similarit√©s:', error);
  }
  
  console.log('üß™ Tests termin√©s');
};

// Exporter pour utilisation
if (typeof module !== 'undefined' && module.exports) {
  module.exports = { testRecommendations };
} else {
  // Pour utilisation dans le navigateur
  window.testRecommendations = testRecommendations;
}

console.log('üìã Script de test des recommandations charg√©. Utilisez testRecommendations() pour lancer les tests.'); 