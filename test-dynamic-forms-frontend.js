const fs = require('fs');
const path = require('path');

console.log('üß™ Test des composants frontend des formulaires dynamiques\n');

// V√©rifier les fichiers essentiels
const filesToCheck = [
  'screens/DynamicFormsManagementScreen.tsx',
  'screens/DynamicFormFieldsScreen.tsx',
  'components/DynamicForm.tsx',
  'services/DynamicFormService.ts',
  'types/dynamicForms.ts',
  'navigation/ProfileStack.tsx'
];

console.log('üìÅ V√©rification des fichiers...\n');

filesToCheck.forEach(file => {
  const filePath = path.join(__dirname, file);
  if (fs.existsSync(filePath)) {
    const stats = fs.statSync(filePath);
    console.log(`‚úÖ ${file} (${stats.size} bytes)`);
  } else {
    console.log(`‚ùå ${file} - MANQUANT`);
  }
});

// V√©rifier les imports dans ProfileStack
console.log('\nüîç V√©rification des imports dans ProfileStack...');
try {
  const profileStackPath = path.join(__dirname, 'navigation/ProfileStack.tsx');
  const profileStackContent = fs.readFileSync(profileStackPath, 'utf8');
  
  if (profileStackContent.includes('DynamicFormsManagementScreen')) {
    console.log('‚úÖ DynamicFormsManagementScreen import√©');
  } else {
    console.log('‚ùå DynamicFormsManagementScreen non import√©');
  }
  
  if (profileStackContent.includes('DynamicFormFieldsScreen')) {
    console.log('‚úÖ DynamicFormFieldsScreen import√©');
  } else {
    console.log('‚ùå DynamicFormFieldsScreen non import√©');
  }
  
  if (profileStackContent.includes('DynamicFormsManagement')) {
    console.log('‚úÖ Route DynamicFormsManagement d√©finie');
  } else {
    console.log('‚ùå Route DynamicFormsManagement manquante');
  }
  
  if (profileStackContent.includes('DynamicFormFields')) {
    console.log('‚úÖ Route DynamicFormFields d√©finie');
  } else {
    console.log('‚ùå Route DynamicFormFields manquante');
  }
} catch (error) {
  console.log('‚ùå Erreur lors de la v√©rification de ProfileStack:', error.message);
}

// V√©rifier les types de navigation
console.log('\nüîç V√©rification des types de navigation...');
try {
  const navigationTypesPath = path.join(__dirname, 'types/navigation.ts');
  const navigationTypesContent = fs.readFileSync(navigationTypesPath, 'utf8');
  
  if (navigationTypesContent.includes('DynamicFormsManagement')) {
    console.log('‚úÖ DynamicFormsManagement dans les types');
  } else {
    console.log('‚ùå DynamicFormsManagement manquant dans les types');
  }
  
  if (navigationTypesContent.includes('DynamicFormFields')) {
    console.log('‚úÖ DynamicFormFields dans les types');
  } else {
    console.log('‚ùå DynamicFormFields manquant dans les types');
  }
} catch (error) {
  console.log('‚ùå Erreur lors de la v√©rification des types:', error.message);
}

// V√©rifier le service DynamicFormService
console.log('\nüîç V√©rification du service DynamicFormService...');
try {
  const servicePath = path.join(__dirname, 'services/DynamicFormService.ts');
  const serviceContent = fs.readFileSync(servicePath, 'utf8');
  
  const requiredMethods = [
    'getFormByCategory',
    'getAllForms',
    'createForm',
    'updateForm',
    'deleteForm',
    'getFormById',
    'addFieldToForm',
    'updateFieldInForm',
    'deleteFieldFromForm'
  ];
  
  requiredMethods.forEach(method => {
    if (serviceContent.includes(`async ${method}`)) {
      console.log(`‚úÖ M√©thode ${method} pr√©sente`);
    } else {
      console.log(`‚ùå M√©thode ${method} manquante`);
    }
  });
} catch (error) {
  console.log('‚ùå Erreur lors de la v√©rification du service:', error.message);
}

// V√©rifier le composant DynamicForm
console.log('\nüîç V√©rification du composant DynamicForm...');
try {
  const componentPath = path.join(__dirname, 'components/DynamicForm.tsx');
  const componentContent = fs.readFileSync(componentPath, 'utf8');
  
  if (componentContent.includes('DynamicFormProps')) {
    console.log('‚úÖ Interface DynamicFormProps d√©finie');
  } else {
    console.log('‚ùå Interface DynamicFormProps manquante');
  }
  
  if (componentContent.includes('categoryId')) {
    console.log('‚úÖ Prop categoryId pr√©sente');
  } else {
    console.log('‚ùå Prop categoryId manquante');
  }
  
  if (componentContent.includes('onFormSubmit')) {
    console.log('‚úÖ Prop onFormSubmit pr√©sente');
  } else {
    console.log('‚ùå Prop onFormSubmit manquante');
  }
} catch (error) {
  console.log('‚ùå Erreur lors de la v√©rification du composant:', error.message);
}

console.log('\n‚úÖ V√©rification termin√©e'); 