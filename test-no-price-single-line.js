const axios = require('axios');

// Configuration
const API_BASE_URL = 'http://localhost:8080/api';

// Couleurs pour les logs
const colors = {
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  reset: '\x1b[0m',
  bold: '\x1b[1m'
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

function logSuccess(message) {
  log(`‚úÖ ${message}`, 'green');
}

function logInfo(message) {
  log(`‚ÑπÔ∏è  ${message}`, 'blue');
}

function logWarning(message) {
  log(`‚ö†Ô∏è  ${message}`, 'yellow');
}

async function testNoPriceSingleLine() {
  log('üé® Test : Suppression des prix et titre sur une ligne', 'bold');
  log('', 'reset');
  
  try {
    // Test des produits avec boost
    const productsResponse = await axios.get(`${API_BASE_URL}/products?page=0&size=10`);
    
    if (productsResponse.data && productsResponse.data.content) {
      const products = productsResponse.data.content;
      const boostedProducts = products.filter(p => p.isBoosted);
      
      logSuccess(`R√©cup√©ration de ${products.length} produits`);
      logInfo(`${boostedProducts.length} produits boost√©s trouv√©s`);
      
      if (boostedProducts.length > 0) {
        log('\nüéØ Modifications appliqu√©es :', 'bold');
        
        log('\n‚ùå Prix supprim√©s :', 'bold');
        log('‚úÖ Aucun affichage du prix dans PinterestProductCard');
        log('‚úÖ Aucun affichage du prix dans EcommerceProductCard');
        log('‚úÖ Styles de prix supprim√©s des deux composants');
        log('‚úÖ Espace lib√©r√© pour plus de contenu');
        
        log('\nüìù Titre sur une ligne :', 'bold');
        log('‚úÖ numberOfLines={1} pour les titres');
        log('‚úÖ Troncature automatique si le titre d√©passe');
        log('‚úÖ Hauteur optimis√©e pour une seule ligne');
        log('‚úÖ Coh√©rence entre les deux modes d\'affichage');
        
        log('\nüì± PinterestProductCard (3 colonnes) :', 'bold');
        log('‚úÖ Titre : numberOfLines={1}, fontSize: 10px');
        log('‚úÖ minHeight: 12px, lineHeight: 12px');
        log('‚úÖ Troncature automatique avec "..."');
        log('‚úÖ Pas d\'affichage du prix');
        
        log('\nüõí EcommerceProductCard (1 colonne) :', 'bold');
        log('‚úÖ Titre : numberOfLines={1}, fontSize: 16px');
        log('‚úÖ minHeight: 18px, lineHeight: 18px');
        log('‚úÖ Troncature automatique avec "..."');
        log('‚úÖ Pas d\'affichage du prix');
        
        log('\nüé® Avantages de ces modifications :', 'bold');
        log('‚úÖ Interface plus √©pur√©e et moderne');
        log('‚úÖ Focus sur le contenu principal (titre, marque, √©tat)');
        log('‚úÖ Meilleure lisibilit√© avec moins d\'√©l√©ments');
        log('‚úÖ Coh√©rence visuelle entre les modes');
        log('‚úÖ Espace optimis√© pour les badges de boost');
        log('‚úÖ Titres toujours lisibles m√™me s\'ils sont longs');
        
        log('\nüìä Structure finale des cartes :', 'bold');
        log('PinterestProductCard:');
        log('  - Image (aspect ratio 1:1)');
        log('  - Badge flamme üî• (20x20px)');
        log('  - Badge favoris (10px)');
        log('  - Marque (9px, 1 ligne)');
        log('  - Titre (10px, 1 ligne, tronqu√©)');
        log('  - D√©tails (8px, 1 ligne)');
        
        log('EcommerceProductCard:');
        log('  - Image (100x100px)');
        log('  - Badge flamme üî• (28x28px)');
        log('  - Badge favoris (16px)');
        log('  - Marque (12px, 1 ligne)');
        log('  - Titre (16px, 1 ligne, tronqu√©)');
        log('  - D√©tails (12px, 1 ligne)');
        
        return true;
      } else {
        logWarning('Aucun produit boost√© trouv√© pour le test');
        return false;
      }
    }
  } catch (error) {
    logWarning(`Erreur lors du test: ${error.message}`);
    return false;
  }
}

// Ex√©cution du test
if (require.main === module) {
  testNoPriceSingleLine()
    .then(success => {
      if (success) {
        logSuccess('üéâ Test de suppression des prix et titre sur une ligne r√©ussi !');
        logInfo('Les cartes affichent maintenant uniquement le titre, la marque et les d√©tails.');
      } else {
        logWarning('‚ö†Ô∏è  Test incomplet - v√©rifiez les donn√©es de test.');
      }
      process.exit(success ? 0 : 1);
    })
    .catch(error => {
      log(`‚ùå Erreur lors de l'ex√©cution du test: ${error.message}`, 'red');
      process.exit(1);
    });
}

module.exports = {
  testNoPriceSingleLine
}; 