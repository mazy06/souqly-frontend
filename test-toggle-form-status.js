const fs = require('fs');
const path = require('path');

console.log('üß™ Test de la fonctionnalit√© de d√©sactivation de formulaires\n');

// V√©rifier les fichiers modifi√©s
const filesToCheck = [
  '../souqly-backend/src/main/java/io/mazy/souqly_backend/controller/AdminDynamicFormController.java',
  '../souqly-backend/src/main/java/io/mazy/souqly_backend/service/DynamicFormService.java',
  'services/DynamicFormService.ts',
  'screens/DynamicFormsManagementScreen.tsx'
];

console.log('üìÅ V√©rification des modifications...\n');

filesToCheck.forEach(file => {
  const filePath = path.join(__dirname, file);
  if (fs.existsSync(filePath)) {
    const content = fs.readFileSync(filePath, 'utf8');
    
    if (file.includes('AdminDynamicFormController.java')) {
      if (content.includes('toggleFormStatus')) {
        console.log('‚úÖ Endpoint toggleFormStatus ajout√© au contr√¥leur');
      } else {
        console.log('‚ùå Endpoint toggleFormStatus manquant dans le contr√¥leur');
      }
    } else if (file.includes('DynamicFormService.java')) {
      if (content.includes('toggleFormStatus')) {
        console.log('‚úÖ M√©thode toggleFormStatus ajout√©e au service backend');
      } else {
        console.log('‚ùå M√©thode toggleFormStatus manquante dans le service backend');
      }
    } else if (file.includes('DynamicFormService.ts')) {
      if (content.includes('toggleFormStatus')) {
        console.log('‚úÖ M√©thode toggleFormStatus ajout√©e au service frontend');
      } else {
        console.log('‚ùå M√©thode toggleFormStatus manquante dans le service frontend');
      }
    } else if (file.includes('DynamicFormsManagementScreen.tsx')) {
      if (content.includes('handleToggleFormStatus')) {
        console.log('‚úÖ Fonction handleToggleFormStatus ajout√©e');
      } else {
        console.log('‚ùå Fonction handleToggleFormStatus manquante');
      }
      
      if (content.includes('pause-outline') && content.includes('play-outline')) {
        console.log('‚úÖ Boutons pause/play ajout√©s');
      } else {
        console.log('‚ùå Boutons pause/play manquants');
      }
    }
  } else {
    console.log(`‚ùå ${file} - MANQUANT`);
  }
});

// V√©rifier les types
console.log('\nüîç V√©rification des types...');
try {
  const typesPath = path.join(__dirname, 'types/dynamicForms.ts');
  const typesContent = fs.readFileSync(typesPath, 'utf8');
  
  if (typesContent.includes('isActive')) {
    console.log('‚úÖ Propri√©t√© isActive pr√©sente dans les types');
  } else {
    console.log('‚ùå Propri√©t√© isActive manquante dans les types');
  }
  
} catch (error) {
  console.log('‚ùå Erreur lors de la v√©rification des types:', error.message);
}

console.log('\n‚úÖ V√©rification termin√©e');
console.log('\nüìã R√©sum√© des fonctionnalit√©s ajout√©es :');
console.log('1. ‚úÖ Endpoint PATCH /api/admin/forms/{formId}/toggle-status');
console.log('2. ‚úÖ M√©thode toggleFormStatus dans le service backend');
console.log('3. ‚úÖ M√©thode toggleFormStatus dans le service frontend');
console.log('4. ‚úÖ Interface utilisateur avec boutons pause/play');
console.log('5. ‚úÖ Confirmation avant d√©sactivation/activation');
console.log('\nüéØ Fonctionnalit√©s disponibles :');
console.log('- D√©sactiver un formulaire actif (bouton pause orange)');
console.log('- Activer un formulaire inactif (bouton play bleu)');
console.log('- Confirmation avant action');
console.log('- Mise √† jour automatique de la liste');
console.log('- Messages de succ√®s/erreur'); 